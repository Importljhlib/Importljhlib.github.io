---
layout: post
title: 밑바닥부터 시작하는 딥러닝 chapter 1
date: 2024-12-28 01:53:00
category: 밑바닥부터 시작하는 딥러닝
---
# chapter 1

## 넘파이

딥러닝을 구현하다 보면 배열, 행렬의 계산이 많기 때문에 이에 편리한 넘파이를 사용한다.

### 넘파이 배열 생성하기

np.array() 메서드로 배열을 생성한다.

특수한 형태의 배열(numpy.ndarray)을 반환한다.

```python
import numpy as np
x = np.array([1.0, 2.0, 3.0])
print(x) # [1. 2. 3.]
print(type(x)) # <class 'numpy.ndarray'>
```

### 넘파이의 산술 연산

```python
x = np.array([1.0, 2.0, 3.0])
y = np.array([2.0, 4.0, 6.0])
print(x+y)  # [3. 6. 9.]
print(x-y)  # [-1. -2. -3.]
print(x*y)  # [ 2.  8. 18.]
print(x/y)  # [0.5 0.5 0.5]
```

만약 x와 y의 원소 수가 같지 않다면 오류가 발생한다.

넘파이 배열은 원소별 계산뿐 아니라 넘파이 배열과 스칼라의 조합으로 된 산술 연산도 수행할 수 있다. (이 기능을 **브로드캐스트**라고 한다)

### 넘파이의 N차원 배열

```python
A = np.array([[1, 2], [3, 4]])
print(A)
# [[1 2]
#  [3 4]]
print(A.shape)  # (2, 2)
print(A.dtype)  # (int32)
```

넘파이는 이처럼 다차원 배열도 작성할 수 있다.

형상은 shape, 원소의 자료형은 dtype으로 알 수 있다.

```python
A = np.array([[1, 2], [3, 4]])
B = np.array([[3, 0], [0, 6]])
print(A+B)
#  [[ 4  2]
#   [ 3 10]]
print(A*B)
#  [[ 3  0]
#   [ 0 24]]
```

다차원 배열도 물론 연산이 가능하다.

브로드캐스트 기능 덕분에 형상이 다른 배열끼리의 연산이 가능해진다.

### 원소 접근

```python
X = np.array([[51, 55], [14, 19], [0, 4]])
X = X.flatten()
print(X)  # [51 55 14 19  0  4]
print(X[np.array([0, 2, 4])]) # [51 14  0]
```

flatten()으로 X를 1차원 배열로 변환할 수 있다. (평탄화)

이를 이용하면 다음과 같이도 응용할 수 있다.

```python
print(X>15)  # [ True  True False  True False False]
print(X[X>15])  # [51 55 19]
```

## matplotlib

딥러닝 실험에선 그래프 그리기와 시각화도 중요하기 때문에 matplotlib을 사용하는 방법을 알아보자.

### 그래프 그리기

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 6, 0.1)
y = np.sin(x)

# 그래프 그리기
plt.plot(x, y)
plt.show()
```

x에는 넘파이의 arange 메서드로 [0, 0.1, 0.2 …. 5.8, 5.9]라는 데이터를 생성하고 y에는 np.sin()을 이용해 생성하였다.

결과는 다음과 같다.

![](/img/DLFS_sin.png)

다양한 기능을 사용해보자.

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0, 6, 0.1)
y1 = np.sin(x)
y2 = np.cos(x)

# 그래프 그리기
plt.plot(x, y1, lable = "sin")
plt.plot(x, y2, linestyle = "--", lable = "cos")
plt.xlabel("x") # x축 이름
plt.ylabel("y") # y축 이름
plt.title('sin & cos') # 제목
plt.legend()
plt.show()
```

![](/img/DLFS_sincos.png)

cos 그래프는 점선, 제목과 축 이름이 생긴 것을 볼 수 있다.